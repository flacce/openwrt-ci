name: IPQ60XX

on:
  workflow_dispatch:
  schedule:
    - cron: 0 19 * * *

env:
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  REPO_BRANCH: k6.18-dev
  CONFIG_FILE: configs/ipq60xx.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: IPQ60XX
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-24.04

    steps:
      - name: 🧐 检查服务器性能
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 🛠️ 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libfuse-dev libssl-dev libtool lrzsz genisoimage msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"

      - name: 💾 合并磁盘
        uses: easimon/maximize-build-space@v7
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: 🛒 检出代码
        uses: actions/checkout@v4

      - name: 📥 克隆源代码
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      - name: 📝 生成变量
        run: |
          cp $CONFIG_FILE $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}' )"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      - name: ⚡ 缓存工具链
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: true
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: 📦 安装 Feeds
        run: |
          cd $OPENWRT_PATH
          git clone --depth 1 https://github.com/sbwml/openwrt_pkgs.git package/new/custom
          mv package/new/custom/luci-app-netspeedtest  package/new
          mv package/new/custom/speedtest-cli package/new
          rm -rf package/new/custom

      - name: ⚙️ 加载自定义配置
        run: |
          [ -e files ] && mv files $OPENWRT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
          chmod +x $DIY_SCRIPT
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_SCRIPT

      - name: ⏬ 下载依赖软件包
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 🚀 开始编译固件
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d-%H%M")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: 🗑️ 检查空间使用情况
        if: (!cancelled())
        run: df -hT

      - name: 📤 上传 Bin 目录
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin

      - name: 🗂️ 整理文件
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          cat sha256sums
          cp $OPENWRT_PATH/.config build.config
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk packages
          tar -zcf Packages.tar.gz packages
          rm -rf packages feeds.buildinfo version.buildinfo
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: 🧾 生成插件列表
        id: plugin_list
        if: steps.compile.outputs.status == 'success'
        run: |
          cd ${{ env.FIRMWARE_PATH }}
          echo "list=$(grep -E 'CONFIG_PACKAGE_luci-app-.*=[ym]' build.config | sed -e 's/CONFIG_PACKAGE_//' -e 's/=[ym]$//' | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_OUTPUT

      - name: 📦 上传固件到 Artifact
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: 🎉 发布固件
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息
            - 带NSS的6.12内核固件
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: 10.0.0.1
            - 🔑 默认密码: 无
            ### 🧊 固件版本
            - 固件内核版本：${{ env.VERSION_KERNEL }}
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
            ### 📦 已编译插件
            `${{ steps.plugin_list.outputs.list }}`
